[
    {
        "id": "c9cd2b57c321101a",
        "type": "tab",
        "label": "Virtual GPS (boattrip)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "986745bac72057c2",
        "type": "victron-virtual",
        "z": "c9cd2b57c321101a",
        "name": "",
        "device": "gps",
        "default_values": false,
        "battery_capacity": "",
        "grid_nrofphases": 1,
        "fluid_type": 0,
        "include_tank_battery": false,
        "include_tank_temperature": false,
        "tank_battery_voltage": 3.3,
        "tank_capacity": 10,
        "temperature_type": 2,
        "include_humidity": false,
        "include_pressure": false,
        "include_temp_battery": false,
        "temp_battery_voltage": 3.3,
        "x": 280,
        "y": 300,
        "wires": []
    },
    {
        "id": "2ef3c046e91c0fdf",
        "type": "victron-output-custom",
        "z": "c9cd2b57c321101a",
        "service": "com.victronenergy.gps/100",
        "path": "/Fix",
        "serviceObj": {
            "service": "com.victronenergy.gps/100",
            "name": "Virtual gps (100)"
        },
        "pathObj": {
            "path": "/Fix",
            "name": "/Fix",
            "type": "number",
            "value": 1
        },
        "name": "",
        "onlyChanges": false,
        "x": 600,
        "y": 220,
        "wires": []
    },
    {
        "id": "128160fb55d6409d",
        "type": "inject",
        "z": "c9cd2b57c321101a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "e4373dfeeaee8d7f"
            ]
        ]
    },
    {
        "id": "e4373dfeeaee8d7f",
        "type": "function",
        "z": "c9cd2b57c321101a",
        "name": "Boattrip: Gibraltar to Florida",
        "func": "// Route waypoints (Mediterranean -> Florida -> Mediterranean)\nconst route = [\n    { lat: 36.4072, lon: -5.1600, name: \"Gibraltar\" },      // Start/End at Gibraltar\n    { lat: 28.4698, lon: -16.2549, name: \"Canary Islands\" }, // Common Atlantic crossing point\n    { lat: 25.7617, lon: -80.1918, name: \"Miami\" },         // Florida destination\n    { lat: 24.5557, lon: -81.7826, name: \"Key West\" },      // Florida Keys\n    { lat: 25.7617, lon: -80.1918, name: \"Miami\" },         // Start return journey\n    { lat: 38.6971, lon: -27.2276, name: \"Azores\" },        // Return via Azores\n    { lat: 36.4072, lon: -5.1600, name: \"Gibraltar\" }       // Back to start\n];\n\n// Initialize state (store in context)\nif (!context.get('boatState')) {\n    context.set('boatState', {\n        currentSegment: 0,\n        progress: 0,\n        direction: 1,  // 1 for outbound, -1 for return\n        startTime: new Date().getTime(),\n        satellites: 12  // Initial satellite count\n    });\n}\n\nlet state = context.get('boatState');\n\n// Function to calculate distance between two points using Haversine formula\nfunction calculateDistance(lat1, lon1, lat2, lon2) {\n    const R = 6371; // Earth's radius in km\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * \n              Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n}\n\n// Function to interpolate between two points\nfunction interpolatePosition(start, end, progress) {\n    return {\n        lat: start.lat + (end.lat - start.lat) * progress,\n        lon: start.lon + (end.lon - start.lon) * progress\n    };\n}\n\n// Update position\nconst timeElapsed = (new Date().getTime() - state.startTime) / 1000; // seconds\nconst averageSpeed = 20; // km/h\nconst distancePerSecond = averageSpeed / 3600; // km/second\n\n// Add some speed variation (±20%)\nconst speedVariation = 0.8 + (Math.random() * 0.4);\nconst adjustedDistance = distancePerSecond * speedVariation * timeElapsed;\n\n// Get current segment points\nconst startPoint = route[state.currentSegment];\nconst endPoint = route[(state.currentSegment + 1) % route.length];\n\n// Calculate segment length\nconst segmentDistance = calculateDistance(startPoint.lat, startPoint.lon, endPoint.lat, endPoint.lon);\n\n// Update progress\nstate.progress += adjustedDistance / segmentDistance;\n\n// Update satellite count occasionally (every ~5 minutes)\nif (Math.random() < 0.01) {  // 1% chance each update\n    // Base satellite count 8-14\n    let newSatCount = 8 + Math.floor(Math.random() * 7);\n    \n    // Occasional poor reception (5% chance)\n    if (Math.random() < 0.05) {\n        newSatCount = 3 + Math.floor(Math.random() * 4); // 3-6 satellites\n    }\n    \n    state.satellites = newSatCount;\n}\n\n// Check if we've completed current segment\nif (state.progress >= 1) {\n    state.currentSegment = (state.currentSegment + 1) % route.length;\n    state.progress = 0;\n    state.startTime = new Date().getTime();\n}\n\n// Calculate current position\nconst currentPosition = interpolatePosition(startPoint, endPoint, state.progress);\n\n// Add small random variations to simulate GPS jitter (±0.0001 degrees)\nconst jitter = 0.0001;\ncurrentPosition.lat += (Math.random() - 0.5) * jitter;\ncurrentPosition.lon += (Math.random() - 0.5) * jitter;\n\n// Calculate heading based on current segment\nconst heading = Math.atan2(\n    endPoint.lon - startPoint.lon,\n    endPoint.lat - startPoint.lat\n) * 180 / Math.PI;\n\n// Calculate speed in knots (with variation)\nconst speedKnots = averageSpeed * speedVariation * 0.539957; // Convert km/h to knots\n\n// Save state\ncontext.set('boatState', state);\n\n// Prepare payload\nmsg.payload = {\n    latitude: Math.round(currentPosition.lat * 10000) / 10000,\n    longitude: Math.round(currentPosition.lon * 10000) / 10000,\n    heading: Math.round(heading * 100) / 100,\n    speed: Math.round(speedKnots * 100) / 100,\n    satellites: state.satellites,\n    segment: {\n        from: startPoint.name,\n        to: endPoint.name,\n        progress: Math.round(state.progress * 100)\n    },\n    units: {\n        speed: \"knots\",\n        heading: \"degrees\"\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 140,
        "wires": [
            [
                "0c0c31077c6760d2"
            ]
        ]
    },
    {
        "id": "0c0c31077c6760d2",
        "type": "link out",
        "z": "c9cd2b57c321101a",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "4f40f506eaf4ad25"
        ],
        "x": 585,
        "y": 140,
        "wires": []
    },
    {
        "id": "4f40f506eaf4ad25",
        "type": "link in",
        "z": "c9cd2b57c321101a",
        "name": "link in 1",
        "links": [
            "0c0c31077c6760d2"
        ],
        "x": 95,
        "y": 220,
        "wires": [
            [
                "c055c41beb43ae7f"
            ]
        ]
    },
    {
        "id": "c055c41beb43ae7f",
        "type": "function",
        "z": "c9cd2b57c321101a",
        "name": "Map to dbus paths",
        "func": "// Array to hold all messages\nlet messages = [];\n\n// Process position data\nmessages.push({\n    path: '/Position/Longitude',\n    payload: msg.payload.longitude\n});\n\nmessages.push({\n    path: '/Position/Latitude',\n    payload: msg.payload.latitude\n});\n\n// Process other GPS data\nmessages.push({\n    path: '/Speed',\n    payload: msg.payload.speed\n});\n\nmessages.push({\n    path: '/Course',\n    payload: msg.payload.heading\n});\n\nmessages.push({\n    path: '/Altitude',\n    payload: 0\n});\n\nmessages.push({\n    path: '/NrOfSatellites',\n    payload: msg.payload.satellites\n});\n\nmessages.push({\n    path: '/Fix',\n    payload: 1\n});\n\n// Return array of messages\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "64b472922f74e264"
            ]
        ]
    },
    {
        "id": "64b472922f74e264",
        "type": "delay",
        "z": "c9cd2b57c321101a",
        "name": "",
        "pauseType": "delay",
        "timeout": ".1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 220,
        "wires": [
            [
                "2ef3c046e91c0fdf"
            ]
        ]
    }
]
